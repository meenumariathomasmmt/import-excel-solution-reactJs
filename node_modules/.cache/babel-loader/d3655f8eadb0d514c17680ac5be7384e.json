{"ast":null,"code":"var _jsxFileName = \"/Users/meenumaria/Desktop/excel-to-json/src/components/ExcelReader.js\";\nimport React, { Component } from 'react';\nimport XLSX from 'xlsx';\nimport { make_cols } from './MakeColumns';\n\nclass ExcelReader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: this.props.filename,\n      data: [],\n      cols: []\n    };\n    this.handleFile = this.handleFile.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) this.setState({\n      file: files[0]\n    });\n  }\n\n  handleFile() {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n\n    reader.onload = e => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, {\n        type: rABS ? 'binary' : 'array',\n        bookVBA: true\n      });\n      /* Get first worksheet */\n\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      const data = XLSX.utils.sheet_to_json(ws);\n      /* Update state */\n\n      this.setState({\n        data: data,\n        cols: make_cols(ws['!ref'])\n      }, () => {\n        console.log(JSON.stringify(this.state.data, null, 2));\n      });\n    };\n\n    if (rABS) {\n      reader.readAsBinaryString(this.state.file);\n    } else {\n      reader.readAsArrayBuffer(this.state.file);\n    }\n\n    ;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Upload an excel to Process Triggers\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"file\",\n      value: this.state.file,\n      className: \"form-control\",\n      id: \"file\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Process Triggers\",\n      onClick: this.handleFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ExcelReader;","map":{"version":3,"sources":["/Users/meenumaria/Desktop/excel-to-json/src/components/ExcelReader.js"],"names":["React","Component","XLSX","make_cols","ExcelReader","constructor","props","state","file","filename","data","cols","handleFile","bind","handleChange","e","files","target","setState","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","read","type","bookVBA","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","console","log","JSON","stringify","readAsArrayBuffer","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport XLSX from 'xlsx';\nimport { make_cols } from './MakeColumns';\n\nclass ExcelReader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: this.props.filename,\n      data: [],\n      cols: []\n    }\n    this.handleFile = this.handleFile.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n \n  handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) this.setState({ file: files[0] });\n  };\n \n  handleFile() {\n    /* Boilerplate to set up FileReader */\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n \n    reader.onload = (e) => {\n      /* Parse data */\n      const bstr = e.target.result;\n      const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array', bookVBA : true });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_json(ws);\n      /* Update state */\n      this.setState({ data: data, cols: make_cols(ws['!ref']) }, () => {\n        console.log(JSON.stringify(this.state.data, null, 2));\n      });\n \n    };\n \n    if (rABS) {\n      reader.readAsBinaryString(this.state.file);\n    } else {\n      reader.readAsArrayBuffer(this.state.file);\n    };\n  }\n \n  render() {\n    return (\n      <div>\n        <label htmlFor=\"file\">Upload an excel to Process Triggers</label>\n        <br />\n        <input type=\"file\" value={this.state.file} className=\"form-control\" id=\"file\" onChange={this.handleChange} />\n        <br />\n        <input type='submit' \n          value=\"Process Triggers\"\n          onClick={this.handleFile} />\n          </div>\n      \n    )\n  }\n}\n \nexport default ExcelReader;"]},"metadata":{},"sourceType":"module"}