{"ast":null,"code":"var _jsxFileName = \"/Users/meenumaria/import-excel/src/App.js\";\nimport React from 'react';\nimport './App.css'; //import {useCallback} from 'react';\n\nimport { useDropzone } from 'react-dropzone'; //import * as XLSX from 'xlsx';\n\nimport { OutTable, ExcelRenderer } from 'react-excel-renderer';\n\nfunction App() {\n  const _useDropzone = useDropzone({\n    accept: '.xlsx, .xls, .csv',\n    minSize: 0\n  }),\n        acceptedFiles = _useDropzone.acceptedFiles,\n        getRootProps = _useDropzone.getRootProps,\n        getInputProps = _useDropzone.getInputProps,\n        isDragActive = _useDropzone.isDragActive;\n\n  fileHandler = event => {\n    let fileObj = event.target.files[0]; //just pass the fileObj as parameter\n\n    ExcelRenderer(fileObj, (err, resp) => {\n      if (err) {\n        console.log(err);\n      } else {\n        this.setState({\n          cols: resp.cols,\n          rows: resp.rows\n        });\n      }\n    });\n  };\n\n  const files = acceptedFiles.map(file => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    key: file.path,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, file.path, \" has uploaded\"), React.createElement(\"button\", {\n    onClick: this.fileHandler.bind(this),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Click\")));\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  })), isDragActive ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Drop the files here ...\") : React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Drag 'n' drop some files here, or click to select files\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, files), React.createElement(OutTable, {\n    data: this.state.rows,\n    columns: this.state.cols,\n    tableClassName: \"ExcelTable2007\",\n    tableHeaderRowClass: \"heading\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/meenumaria/import-excel/src/App.js"],"names":["React","useDropzone","OutTable","ExcelRenderer","App","accept","minSize","acceptedFiles","getRootProps","getInputProps","isDragActive","fileHandler","event","fileObj","target","files","err","resp","console","log","setState","cols","rows","map","file","path","bind","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP,C,CACA;;AACA,SAAQC,WAAR,QAA0B,gBAA1B,C,CACA;;AACA,SAAQC,QAAR,EAAkBC,aAAlB,QAAsC,sBAAtC;;AAGA,SAASC,GAAT,GAAe;AAAA,uBACsDH,WAAW,CAAC;AAC7EI,IAAAA,MAAM,EAAE,mBADqE;AAE7EC,IAAAA,OAAO,EAAE;AAFoE,GAAD,CADjE;AAAA,QACNC,aADM,gBACNA,aADM;AAAA,QACSC,YADT,gBACSA,YADT;AAAA,QACuBC,aADvB,gBACuBA,aADvB;AAAA,QACsCC,YADtC,gBACsCA,YADtC;;AAMbC,EAAAA,WAAW,GAAIC,KAAD,IAAW;AACvB,QAAIC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAd,CADuB,CAGvB;;AACAZ,IAAAA,aAAa,CAACU,OAAD,EAAU,CAACG,GAAD,EAAMC,IAAN,KAAe;AACpC,UAAGD,GAAH,EAAO;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACD,OAFD,MAGI;AACF,aAAKI,QAAL,CAAc;AACZC,UAAAA,IAAI,EAAEJ,IAAI,CAACI,IADC;AAEZC,UAAAA,IAAI,EAAEL,IAAI,CAACK;AAFC,SAAd;AAID;AACF,KAVY,CAAb;AAYD,GAhBD;;AAkBA,QAAMP,KAAK,GAAGR,aAAa,CAACgB,GAAd,CAAkBC,IAAI,IAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAG,IAAA,GAAG,EAAEA,IAAI,CAACC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IAAI,CAACC,IADR,kBADA,EAIA;AAAQ,IAAA,OAAO,EAAE,KAAKd,WAAL,CAAiBe,IAAjB,CAAsB,IAAtB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJA,CADY,CAAd;AASA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,6CAASlB,YAAY,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,+CAAWC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAGIC,YAAY,GACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADU,GAEV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DALN,CADF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIK,KAAJ,CADF,EAEE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAE,KAAKY,KAAL,CAAWL,IAA3B;AAAiC,IAAA,OAAO,EAAE,KAAKK,KAAL,CAAWN,IAArD;AAA2D,IAAA,cAAc,EAAC,gBAA1E;AAA2F,IAAA,mBAAmB,EAAC,SAA/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CATF,CADF;AAgBD;;AAED,eAAejB,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\n//import {useCallback} from 'react';\nimport {useDropzone} from 'react-dropzone';\n//import * as XLSX from 'xlsx';\nimport {OutTable, ExcelRenderer} from 'react-excel-renderer';\n\n\nfunction App() {\n  const {acceptedFiles, getRootProps, getInputProps, isDragActive} = useDropzone({\n    accept: '.xlsx, .xls, .csv',\n    minSize: 0\n  });\n  \n  fileHandler = (event) => {\n    let fileObj = event.target.files[0];\n\n    //just pass the fileObj as parameter\n    ExcelRenderer(fileObj, (err, resp) => {\n      if(err){\n        console.log(err);            \n      }\n      else{\n        this.setState({\n          cols: resp.cols,\n          rows: resp.rows\n        });\n      }\n    });               \n\n  }\n\n  const files = acceptedFiles.map(file => (\n    <div>\n    <p key={file.path}>\n      {file.path} has uploaded\n    </p>\n    <button onClick={this.fileHandler.bind(this)}>Click</button>\n    </div>\n  ));\n\n  return (\n    <div>\n      <div {...getRootProps()}>\n        <input {...getInputProps()} />\n        {\n          isDragActive ?\n            <p>Drop the files here ...</p> :\n            <p>Drag 'n' drop some files here, or click to select files</p>\n        }\n      </div>\n      <div>\n        <p>{files}</p>\n        <OutTable data={this.state.rows} columns={this.state.cols} tableClassName=\"ExcelTable2007\" tableHeaderRowClass=\"heading\" />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}